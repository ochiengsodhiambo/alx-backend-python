pipeline {
    agent any

    environment {
        GITHUB_CREDS = credentials('github-creds')
        DOCKERHUB_CREDS = credentials('dockerhub-creds')
        APP_NAME = 'messaging_app'
        IMAGE_NAME = "ochiengsodhiambo/messaging_app"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/ochiengsodhiambo/alx-backend-python.git',
                    credentialsId: 'github-creds'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                echo "Installing system dependencies..."
                apt-get update -y
                apt-get install -y python3 python3-pip python3-venv

                echo "Creating virtual environment..."
                python3 -m venv venv
                . venv/bin/activate

                echo "Installing Python requirements..."
                pip install --upgrade pip
                pip install -r messaging_app/requirements.txt
                '''
            }
        }

        stage('Run Tests') {
            steps {
                sh '''
                . venv/bin/activate
                pytest
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                docker build -t $IMAGE_NAME:latest messaging_app/
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    docker push $IMAGE_NAME:latest
                    '''
                }
            }
        }
    }

    post {
        success {
            echo " Build and push successful!"
        }
        failure {
            echo "Build failed. Check logs for details."
        }
        always {
            sh 'rm -rf venv'
        }
    }
}
